---========================---
---== LUA MODULE IMPORTS ==---
---========================---
local debugdraw = require "extensions.defold.debug-draw.debug-draw"
local defmath = require "extensions.defold.defmath.defmath"
local lume = require "extensions.external.lume.lume"
local gui_extra = require "extensions.defold.gui_extra.gui_extra"
local monarch = require "extensions.defold.monarch.monarch"
local rc = require "extensions.defold.rendercam.rendercam"
local csv = require "extensions.defold.csv-importer.csv-importer"
local gp = require "gamedata.runtime_gameplay"
local c = require "gamedata.constants"

---========================---
---========================---

local function hflip_object(object_url, direction)

	if direction == 1 then 
		go.set_rotation(vmath.quat_rotation_y(0), object_url)
	elseif direction == -1 then
		go.set_rotation(vmath.quat_rotation_y(math.pi), object_url)
	end

end


---========================---
---========================---

function init(self)
	msg.post(".", "acquire_input_focus")

	-- char control
	self.direction = vmath.vector3()
	self.speed = 5

	-- animation
	self.url = "/spine_test#model"
	self.anim_cur = ""
	self.switch_anim = 1
	self.anim_move_name = "walk" -- run for the spineboy, walk for the test_ork_001 ("idle" remains "idle" in both cases)

	self.anim_speed_idle = 2
	self.anim_speed_walk = 1.5
	self.anim_blend_duration = 0.15
	
	-- spine_custo
	local nb_slots = #gp.slots
	for i=1,nb_slots do
		spine.set_attachment(self.url, gp.slots[i].name, gp.slots[i].image.."_"..gp.slots[i].id_min)
	end

end

function update(self, dt)

	--====================--
	------ MOVEMENT
	--====================--
	
	-- normalization (not required here but.. who knows)
	if vmath.length_sqr(self.direction) > 1 then
		self.direction = vmath.normalize(self.direction)
	end

	local p = go.get_world_position()
	local movement = self.direction * self.speed
	local p_final = p + movement
	p_final.x, p_final.y = lume.round(p_final.x, 1), lume.round(p_final.y, 1)
	go.set_position(p_final)

	
	--====================--
	------ ANIMATION
	--====================--

	if self.switch_anim == 1 then
		
		if self.direction.x == 0 then
			self.anim_cur = "idle"
		else
			self.anim_cur = self.anim_move_name
		end

		local blend_duration_value, playback_rate_value = 0, self.anim_speed_idle
		if self.anim_cur == "idle" then
			blend_duration_value = self.anim_blend_time
		else
			playback_rate_value = self.anim_speed_walk
		end
		
		local properties = { blend_duration = blend_duration_value, playback_rate = playback_rate_value }
		spine.play_anim(self.url, self.anim_cur, go.PLAYBACK_LOOP_FORWARD, properties)

		self.switch_anim = 0
	end

	
	--====================--
	------ ORIENTATION (left-right)
	--====================--
	
	hflip_object(self.url,self.direction.x)


	--====================--
	------ CUSTOMIZATION
	--====================--

	local nb_slots_updated = #gp.slots_updated
	
	if nb_slots_updated > 0 then

		for i=1,#gp.slots_updated do
			--print("slot index => "..gp.slots_updated[i].index)
		end
		
		----[[--
		for i=1,nb_slots_updated do
			local slot_index = gp.slots_updated[i].index
			local nb_slots = #gp.slots
			for j=1,nb_slots do
				if j == slot_index then
					--print("pouet pouet > slot "..j)
					gp.slots[j].id_cur = gp.slots[j].id_cur + 1
					if gp.slots[j].id_cur > gp.slots[j].id_max then
						gp.slots[j].id_cur = gp.slots[j].id_min
					end
					local id_cur = gp.slots[j].id_cur
					local name = gp.slots[j].name
					local image_tag = gp.slots[j].image
					spine.set_attachment(self.url, name, image_tag.."_"..id_cur)
				end
			end
		end

		
		--print("updated ! pouet pouet")
		--]]--
		emptytable(gp.slots_updated)

	end


	--====================--
	------ DEBUG
	--====================--

	local DEBUG_pos_x, DEBUG_pos_y, DEBUG_pos_y_diff = 10,500,15
	debugdraw.text("self.direction.x = "..self.direction.x, DEBUG_pos_x, DEBUG_pos_y, color)
	DEBUG_pos_y = DEBUG_pos_y - DEBUG_pos_y_diff
	debugdraw.text("self.switch_anim = "..self.switch_anim, DEBUG_pos_x, DEBUG_pos_y, color)
	DEBUG_pos_y = DEBUG_pos_y - DEBUG_pos_y_diff*2
	--debugdraw.text("current head = "..gp.head_id_cur, DEBUG_pos_x, DEBUG_pos_y, color)
	DEBUG_pos_y = DEBUG_pos_y - DEBUG_pos_y_diff
	--debugdraw.text("current wrist = "..gp.wrist_id_cur, DEBUG_pos_x, DEBUG_pos_y, color)
	DEBUG_pos_y = DEBUG_pos_y - DEBUG_pos_y_diff
	--debugdraw.text("current weapon = "..gp.weapon_id_cur, DEBUG_pos_x, DEBUG_pos_y, color)
	DEBUG_pos_y = DEBUG_pos_y - DEBUG_pos_y_diff
	
end



function on_input(self, action_id, action)

	if action.pressed then

		-------------
		if action_id == hash("space") then
			--print("Space!")
		end

		if action_id == hash("left") then
			--print("Left!")
			if self.direction.x == 0 then
				self.direction.x = -1
				if self.switch_anim == 0 then
					self.switch_anim = 1
				end
			end
		end

		if action_id == hash("right") then
			--print("Right!")
			if self.direction.x == 0 then
				self.direction.x = 1
				if self.switch_anim == 0 then
					self.switch_anim = 1
				end
			end
		end
		
	elseif action.released then

		if action_id == hash("right") or action_id == hash("left") then
			--print("Released!")
			
			if self.direction.x ~= 0 then
				self.direction.x = 0
			end
				
			if self.switch_anim == 0 then
				self.switch_anim = 1
			end
			
		end

	end

end



function on_message(self, message_id, message, sender)
	if message_id == hash("spine_event") then
		-- Receiving animation event from Spine. Play footsteps.
		if message.event_id == hash("test") then
			--print("event test!!")
		end
	end
end